// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UltraPlayProject.Persistence;

#nullable disable

namespace UltraPlayProject.Persistence.Migrations
{
    [DbContext(typeof(UltraPlayProjectContext))]
    [Migration("20230118184406_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UltraPlayProject.Domain.Entities.Bet", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<int?>("MatchID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MatchID");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("UltraPlayProject.Domain.Entities.Event", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SportID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SportID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("UltraPlayProject.Domain.Entities.Match", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int?>("EventID")
                        .HasColumnType("int");

                    b.Property<int>("MatchType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("UltraPlayProject.Domain.Entities.Odd", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int?>("BetID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("SpecialBetValue")
                        .HasColumnType("float");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("BetID");

                    b.ToTable("Odds");
                });

            modelBuilder.Entity("UltraPlayProject.Domain.Entities.Sport", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("UltraPlayProject.Domain.Entities.Bet", b =>
                {
                    b.HasOne("UltraPlayProject.Domain.Entities.Match", null)
                        .WithMany("Bets")
                        .HasForeignKey("MatchID");
                });

            modelBuilder.Entity("UltraPlayProject.Domain.Entities.Event", b =>
                {
                    b.HasOne("UltraPlayProject.Domain.Entities.Sport", null)
                        .WithMany("Events")
                        .HasForeignKey("SportID");
                });

            modelBuilder.Entity("UltraPlayProject.Domain.Entities.Match", b =>
                {
                    b.HasOne("UltraPlayProject.Domain.Entities.Event", null)
                        .WithMany("Matches")
                        .HasForeignKey("EventID");
                });

            modelBuilder.Entity("UltraPlayProject.Domain.Entities.Odd", b =>
                {
                    b.HasOne("UltraPlayProject.Domain.Entities.Bet", null)
                        .WithMany("Odds")
                        .HasForeignKey("BetID");
                });

            modelBuilder.Entity("UltraPlayProject.Domain.Entities.Bet", b =>
                {
                    b.Navigation("Odds");
                });

            modelBuilder.Entity("UltraPlayProject.Domain.Entities.Event", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("UltraPlayProject.Domain.Entities.Match", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("UltraPlayProject.Domain.Entities.Sport", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
